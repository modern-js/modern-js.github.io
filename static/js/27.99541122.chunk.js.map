{"version":3,"sources":["../topics/language-features/objects.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"static/js/27.99541122.chunk.js","sourcesContent":["module.exports = \"# Objects\\nObjects are collections of properties\\n---\\n\\n## Creating Objects\\n\\n- `{} /* object literal */`\\n- `new Constructor()`\\n- `Object.create(prototype)`\\n- `Factory pattern`\\n---\\n\\n\\n### Anatomy of an object literal\\nObject literals are composed of a series of `key`:`value` pairs.\\nAll keys of an object are converted to strings.\\n\\n```javascript\\n// an object literal\\nconst person = {\\n  'age': 33,\\n  name: 'Misho', // the name key is a string, same as age\\n  'favorite game': 'Race for the Galaxy'\\n};\\n```\\n\\n---\\n\\n### Object literals\\n\\nES6 introduces a new property shorthand.\\nHere the value of the `hobby` variable is assigned\\nto the `hobby` property of the `person` object.\\n\\n```javascript\\n  const hobby = 'juggling';\\n  const person = {\\n    hobby\\n    name: 'Misho',\\n    age: 30,\\n  };\\n```\\n\\n---\\n\\n### Accessing object properties\\nThere a 2 ways to access the value of an object property:\\n- using the `.` infix operator\\n- using the `[]` postfix operator\\n\\n```javascript\\n  person.name // returns \\\"Misho\\\"\\n  person['name'] // returns \\\"Misho\\\"\\n\\n  // might throw an error if a variable called name is not defined\\n  person[name]\\n```\\n\\n---\\n\\n### The new operator\\n\\nThe `constructor` function sets the properties of the new object.\\n\\n```javascript\\n  //constructor function\\n  function Rect(a,b) {\\n    this.a = a;\\n    this.b = b;\\n  }\\n\\n  const rect1 = new Rect(5, 6);\\n  rect1.a; // 5\\n  rect1.b; // 6\\n```\\n---\\n\\n### Object.create\\n\\nCreates objects with the specified prototype.\\n```javascript\\n  const rect1 = Object.create();\\n  rect1.a = 5;\\n  rect1.b = 6;\\n```\\n---\\n\\n## Methods\\n\\nA method is a function that is assigned to a property of an object.\\nES6 introduces a new shorthand for defining methods.\\nIn the below example `es5Method` and `es6Method` are equivalent.\\n\\n```javascript\\n  const object = {\\n    es5Method: function () {},\\n    es6Method() {},\\n    arrowNotAMethod: () => {}\\n  }\\n```\\n---\\n\\n## Dynamic property names\\n\\nES6 introduces dynamic property keys using bracket `[]` syntax.\\n*Remember:* all object keys are strings\\n\\n```javascript\\n  const getC = () => 'c';\\n  const object = {\\n    a: 1,\\n    'b': 2,\\n    [getC()]: 3,\\n  }\\n```\\n---\\n\\n### Property descriptors\\n\\nObject properties have some special flags:\\n- configurable: can the property be removed?\\n- enumerable: is the property listed?\\n- writable: can the value of the property be changed?\\n\\n---\\n\\n### Property descriptors\\n\\n```javascript\\n  Object.getOwnPropertyDescriptors(\\n    { id: '1', data: 'nom nom'}\\n  );\\n  // returns:\\n  {\\n    id: {\\n      value: '1',\\n      configurable: true,\\n      enumerable: true,\\n      writable: true\\n    }, //...\\n  }\\n```\\n---\\n\\n### Defining properties with flags\\n\\nYou can set these special flags when defining properties.\\n```javascript\\n  Object.defineProperty(\\n    myObject, 'newKey', { writable: false, value: 42 }\\n  );\\n\\n  Object.defineProperties(\\n    myObject,\\n    {\\n      'newKey_1': { enumerable: false, value: 'unlisted' },\\n      'newKey_2': { configurable: false, value: 'here to stay'}\\n    }\\n  );\\n```\\n---\\n\\n### Getters and Setters\\n\\nProperties can execute a `get` function when the property is accessed and a `set` function when it is assigned a value.\\n\\n```javascript\\n  const thermometer = Object.defineProperty(\\n    { c: 22 }, 'f', {\\n      get() { return this.c * 1.8 + 32; },\\n      set(v) { this.c = (v - 32) / 1.8 }\\n    });\\n\\n  thermometer.f // 71.6\\n  thermometer.f = 100\\n  thermometer.c // 37.7\\n```\\n\\n---\\n## The Object object\\n\\n`Object` (with a capital O) is a special global object. It has many useful methods and properties.\\n\\n---\\n## Object.keys / Object.values()\\n\\nGet an array of the names of all _enumerable_ properties of an object.\\n\\n```javascript\\n  const propertyNames = Object.keys(myObject); // ['name', 'age', 'hobby']\\n```\\n\\nGet an array of the values of the _enumerable_ properties of an object.\\n```javascript\\n  const propertyValues = Object.values(myObject); // ['Misho', 33, 'juggling'] \\n```\\n---\\n\\n### Object.assign()\\n\\nCreates a new object containing all the _enumerable_ properties of the\\ngiven objects (later objects override repeating keys).\\n\\n```javascript\\n  const fullData = Object.assign({}, defaultData, userData);\\n\\n  // alternatively use the object spread operator\\n  const fullData = { ...defaultData, ...userData };\\n```\\n---\\n\\n### Object.preventExtensions()\\n\\nDisallow adding new properties to an object.\\n\\n```javascript\\n  const pointA = Object.preventExtensions({ x: 0, y: 0 });\\n  pointA.x = 15; // no problem\\n  pointA.z = 0; // throws an error\\n  delete pointA.y; // success, but now it's a 1d point...\\n```\\n---\\n\\n### Object.seal()\\n\\nDisallow adding or removing properties.\\n```javascript\\n  const pointB = Object.seal({ x: 0, y: 0 });\\n  pointB.x = 15; // no problem\\n  pointB.z = 0; // throws an error\\n  delete pointB.y; // throws an error\\n```\\n---\\n\\n### Object.freeze()\\n\\nMake an object immutable.\\nDisallow adding / removing properties,\\nor changing their values.\\n\\n```javascript\\n  const pointC = Object.freeze({ x: 0, y: 0 });\\n  pointC.x = 15; // throws an error\\n  pointC.z = 0; // throws an error\\n  delete pointC.y; // throws an error\\n```\\n---\\n\\n### Inspect an object\\n\\nThere are corresponding functions that check if an object is frozen, sealed\\nor has disabled extensions.\\n```javascript\\n  Object.isExtensible(pointA) // false\\n  Object.isExtensible(pointB) // false\\n  Object.isExtensible(pointC) // false\\n\\n  Object.isSealed(pointA) // false\\n  Object.isSealed(pointB) // true\\n  Object.isSealed(pointC) // true\\n\\n  Object.isFrozen(pointA) // false\\n  Object.isFrozen(pointB) // false\\n  Object.isFrozen(pointC) // true\\n```\\n---\\n\\n## Patterns\\n---\\n\\n### Factory function\\n\\n```javascript\\n  function createTaxi(car, driver) {\\n    // use any object creation technique\\n    const taxi = {\\n      car,\\n      driver,\\n      meter: new Meter()\\n    };\\n\\n    car.on('start', taxi.meter.start);\\n    car.on('stop', taxi.meter.stop);\\n\\n    return taxi;\\n  }\\n```\\n---\\n\\n### Dictionary / Lookup\\n```javascript\\n  const translations = {\\n    en: 'Hello',\\n    bg: 'Здравейте'\\n  };\\n\\n  const sayHi = (lang) => (\\n    translations[lang] || translations['en']\\n  );\\n```\\n---\\n\\n## Prototypical inheritance\\n\\nSee [Prototypes](../prototypes/)\\n\""],"sourceRoot":""}