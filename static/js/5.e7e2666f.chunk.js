(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{889:function(e,n){e.exports="## Sets\n\n```javascript\n const uniqueNumbers = new Set();\n\n uniqueNumbers.add(1);\n uniqueNumbers.add(1);\n uniqueNumbers.add(2);\n uniqueNumbers.add(3);\n\n uniqueNumbers.delete(1);\n\n uniqueNumbers.has(5);\n```\n---\n\n### Values vs references\n\nObjects are compared by reference not by value\n```javascript\n  const obj = { x: 1, y: 2 };\n\n  set.add({ x, 1, y, 2 }); // set.size 1\n\n  set.has(obj) // false;;\n\n  set.add({ x, 1, y, 2 }); // set.size 2\n\n  set.add(obj); // set.size 3\n```\n---\n\n## Maps\n\n```javascript\n\n  const map = new Map();\n\n  map.set('key', 'value');\n  map.get('key');\n\n  map.has('key');\n\n  map.delete('key');\n\n```\n---\n\n## Weak Sets / Weak Maps\n\nThese data structures are intended to prevent memory leaks. They do not hold references to the data they contain. Garbage collection can destroy data inside them.\n\nAs such, they are not iterable (they don't have a `forEach` method) and no `size` method.\n---\n\n## Weak Sets / Weak Maps\n\n```javascript\n  const reclamables = new WeakSet();\n  let obj = {};\n\n  reclamables.add(obj);\n  reclamables.has(obj); // true\n\n  obj = null;\n  reclamables.has(obj); // false\n```\n"}}]);
//# sourceMappingURL=5.e7e2666f.chunk.js.map