{"version":3,"sources":["../topics/language-features/numbers-and-math.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"static/js/26.2d70834d.chunk.js","sourcesContent":["module.exports = \"# Numbers and Math\\n\\n---\\n## The number type\\n\\nAll numbers in JavaScript are represented internally as 64-bit floating point\\n\\n```javascript\\n  1 === 1.0 // true\\n```\\n\\n---\\n## Number literals\\n\\nThere are multiple ways to denote a number literal\\n\\n```javascript\\n  // hex literal\\n  10 === 0xa // true\\n\\n  //octal literal\\n  10 === 0o12 // true\\n\\n  //binary literal\\n  10 === 0b1010 // true\\n\\n  // scientific notation\\n  1000 === 10e2 // true\\n```\\n\\n---\\n## NaN\\n\\n`NaN` stands for Not A Number and represents\\na failure to perform a mathematical operation.\\nThe result of any operation involving `NaN` will be `NaN`\\n\\n```javascript\\n  typeof NaN // number\\n\\n  5 - 'string' // NaN\\n  NaN + 1 // NaN\\n\\n  NaN === NaN // false\\n  NaN !== NaN // true\\n\\n  isNaN(NaN) // true\\n  isNaN(\\\"abc\\\") // true\\n\\n  Number.isNaN(NaN) // true\\n  Number.isNaN(\\\"abc\\\") // false\\n```\\nUse `Number.isNaN` instead of `isNaN`\\n\\n---\\n## Number Functions\\n---\\n### ParseInt\\n\\nPrefer `Number.parseInt` to the global `parseInt` function\\n\\n```javascript\\n  Number.parseInt(\\\"100\\\", 2) // 4\\n  Number.parseInt(\\\"100\\\", 10) // 100\\n  Number.parseInt(\\\"100\\\", 16) // 256\\n\\n  Number.parseInt(\\\"100abc101\\\", 10) // 100\\n  Number.parseInt(\\\"abc\\\", 10) // NaN\\n```\\n---\\n### ParseFloat\\n\\n```javascript\\n  Numuber.parseFloat('3.14') // 3.14\\n```\\n\\n---\\n### Safely comparing fractions\\n\\n```javascript\\n  0.3 - (0.1 + 0.2) === 0 // false\\n  0.3 - (0.1 + 0.2) < Number.EPSILON // true\\n```\\n\\n---\\n## Math functions\\n\\n---\\n## Links\\n\\n- [new number features in ES6](http://2ality.com/2015/04/numbers-math-es6.html)\\n\""],"sourceRoot":""}