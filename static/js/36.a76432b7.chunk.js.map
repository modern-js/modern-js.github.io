{"version":3,"sources":["../topics/tooling/debugging.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"static/js/36.a76432b7.chunk.js","sourcesContent":["module.exports = \"# Debugging\\n\\n- Discover bugs\\n- Analyzing code during runtime\\n- Diagnose performance issues\\n---\\n\\n## Browser Dev console\\n\\n- Debugging\\n- Performance analysis\\n- Network logging\\n- Runtime DOM manipulation\\n- Application resources\\n---\\n\\n## Debugger statement\\n\\nThe `debugger` statement instructs the engine to pause the execution of the code.\\nIt works only if the development console is active.\\n\\n```javascript\\n  debugger;\\n```\\n---\\n\\n## Node debugging flags\\n\\nNode.js exposes a debugger, which can be operated\\neither through the command line or remotely through\\nIDEs or the browser's dev console.\\n\\n```bash\\n  node --inspect --debug-brk FILE_NAME\\n```\\n---\\n\\n## Source Maps\\n\\n- When using a transpiler such as `babel` or `typescript`\\nthe running code is different from the code you've written\\n- Source Maps are files (or inlined comment blocks)\\nthat map transpiled to original code.\\n- This allows easier tracing and debugging\\n- [Youtube video about Source Maps](https://www.youtube.com/watch?v=NkVes0UMe9Y)\\n---\\n\\n### Using source maps\\n\""],"sourceRoot":""}