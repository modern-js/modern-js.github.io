(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{899:function(n,e){n.exports="# Arrays\n\nArrays are objects with their prototype set to `Array.prototype`\n---\n\n## Array literals\n\n```javascript\n  const emptyArray = [];\n  const anyValues = ['one', 2, { three: true }];\n```\n\nNotice each array literal is a distinct object\n\n```javascript\n  [] === [] // false\n  [1, 2, 3] === [1, 2, 3] // false\n```\n---\n\n## Array length\nThe length property contains the largest index of the array plus one.\n```javascript\n  const arr = [];\n  arr.length // 0\n\n  arr[5] = 'hello';\n  arr.length // 6\n\n  arr // 5 empty slots, 'hello'\n```\n---\n\n## Checking if something is an array\n```javascript\n  const arr = [];\n\n  // the typeof operator has no notion of arrays\n  typeof arr // \"object\"\n\n  // use Array.isArray instead\n  Array.isArray(arr) // true\n```\n---\n\n## Array methods\nThere a lot of useful methods that arrays inherit from `Array.prototype`.\n---\n\n### push\nAdd an element to the end of an array.\n```javascript\n  array.push(newElement);\n```\n\n### pop\nRemove and return the last element of the array\n```javascript\n  let lastElement = array.pop();\n```\n---\n\n### join\nReturns a string combining all elements with the given delimiter.\n```javascript\n  ['hello', 'crazy', 'world'].join('! ');\n  // returns \"hello! crazy! world\"\n```\n\n### concat\nRetruns a new array containing all the given values.\n```javascript\n  [1, 2, 3].concat([4, 5]); // returns [1, 2, 3, 4, 5]\n```\n---\n\n### slice\nReturn a copy of a sub array,\nstarting from the given index and having the given length\n```javascript\n  const numbers = [1, 2, 3, 4, 5];\n  numbers.slice(0,2); // returns [1, 2];\n```\n\n### splice\nModifies the given array:\nadding, removing or replacing elements\n```javascript\n  const numbers = [1, 2, 3, 4, 5];\n  const fourAndFive = numbers.splice(3, 2);\n  // fourAndFive = [4, 5];\n  // numbers = [1, 2, 3];\n```\n---\n\n### forEach\nExecute the given function on each element of the array.\n```javascript\n  array.forEach((el) => console.log(el));\n```\n\n### filter\nApply the given function to each element of the array.\nIf the function returns true, the value is added to the new results array.\n```javascript\n  const evenOnly = [1, 2, 3, 4, 5].filter(number => number % 2);\n```\n---\n\n### map\nReturns an array of the result of applying\nthe given function to each element of the array.\n```javascript\n  const doubled = [1, 2, 3, 4, 5].map(number => number * 2);\n  // returns [2, 4, 6, 8, 10]\n```\n\n### reduce\nAccumulate a result by applying the given function to each element.\n```javascript\n  const summed = [1, 2, 3, 4, 5]\n    .reduce((result, number) => result + number, 0); // 15\n```\n---\n\n### some\nReturns true if any of the elements satisfy the condition function\n```javascript\n[1, 2, 3, 4, 5].some(number => number % 2); // returns true\n```\n\n### every\nReturns true if all the elements satisfy the predicate\n```javascript\n[1, 2, 3, 4, 5].some(number => number % 2); // returns false\n```\n---\n### flat\n\n### flatMap"}}]);
//# sourceMappingURL=15.1baa8a6f.chunk.js.map