{"version":3,"sources":["../topics/language-features/classes.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"static/js/17.d6ef48a6.chunk.js","sourcesContent":["module.exports = \"# Classes\\n\\nClasses are syntactic sugar - the underlying implementation still uses prototypes\\n---\\n\\n## Declaration\\n\\n### Class statement\\n\\n```javascript\\n  class Point {\\n    constructor(x, y) {\\n      this.x = x;\\n      this.y = y;\\n    }\\n\\n    getCoordinates() {\\n      return {\\n        x: this.x,\\n        y: this.y\\n      };\\n    }\\n  }\\n\\n  const center = new Point(0, 0);\\n  center.getCoordinates(); // { x: 0, y: 0 }\\n```\\n---\\n\\n### Class expression\\n\\n```javascript\\n  const Point = class {\\n    getX() { ... },\\n    setX() { ... }\\n  };\\n\\n  const center = new Point(0, 0);\\n```\\n---\\n\\n### Constructor\\n\\nThe `constructor` function is invoked when a new instance of the class is created using `new`.\\nInside the constructor `this` is set to the newly created object.\\n\\n```javascript\\n  class Point {\\n    constructor(x, y) {\\n      this.x = x;\\n      this.y = y;\\n    }\\n  }\\n```\\n---\\n\\n## Extends\\nClasses can extend other classes\\n\\n```javascript\\n  class Point3D extends Point {\\n    getZ() { ... },\\n    setZ() { ... },\\n  }\\n\\n  const point3d = new Point3D();\\n  point3d.getX(); // inherited method\\n```\\n---\\n\\n## Super\\nClasses can access their parents `constructor` using `super`\\n\\n```javascript\\n    class Point3D extends Point {\\n      constructor(x, y, z) {\\n        super(x,y); // executes Point's constructor\\n        this.z = z;\\n      }\\n\\n      getZ() { ... },\\n      setZ() { ... },\\n  }\\n\\n  const point3d = new Point3D();\\n  point3d.getX(); // inherited method\\n```\\n---\\n\\n## Inheritance\\n\\nSee [Prototypes](../prototypes/)\\n\""],"sourceRoot":""}