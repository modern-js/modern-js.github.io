{"version":3,"sources":["../topics/language-features/language-structure.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"static/js/23.c3cfe048.chunk.js","sourcesContent":["module.exports = \"# Language Structure\\n---\\n\\n## Statements\\n\\nStatements do not resolve to a value.\\n\\n```javascript\\n  {} // code block statement\\n  var\\n  let\\n  const\\n  if () {} else {}\\n  for () { continue }\\n  while () { break }\\n  switch () { case }\\n  try { throw; } catch() {}\\n  function f() { return }\\n  class c {}\\n  import\\n  export\\n  debugger\\n```\\n---\\n\\n## Expressions\\n\\nEverything that is not a statement, is an expression.\\nExpressions resolve to a value\\n\\n```javascript\\n  5 // a literal number expression;\\n  \\\"use strict\\\" // a string literal expression (pragma)\\n  {} // an object literal expression (SEE NEXT SLIDE)\\n\\n  a + b // addition expression  \\n  a = 5 // assignment expression\\n\\n  // the comma expression evaluates to\\n  // the result of the second expression\\n  console.log(message), message\\n```\\n---\\n\\n## Statement position\\n\\nbegins at the start of a line or after a semi-colon `;`\\n\\n```javascript\\n  5 // a number literal expression in statement position\\n\\n  // code block statements containing one comma expression at statement position\\n  { 1, 2, 3 } // evaluates to 3\\n  // code block statements containing two labelled statements (label: expression)\\n  { x: 1; y: 2 } // evaluates to 2\\n\\n  // BUT trying to create an object literal expression\\n  { x: 1, y: 2 } // this will throw an error!!\\n\\n  // the variable declaration statement is hoisted\\n  // assignment expression of an object literal to a variable\\n  var point = { x:1 , y: 2 };\\n\\n  // assignment of a code block to a variable\\n  var p2 = { x: 1; y: 2 } // this will throw an error\\n```\\n---\\n\\n## Expression position\\n\\nYou cannot use a statement when an expression is expected\\n\\n```javascript\\n  //\\\"if\\\" is a statement\\n  //the following code will throw an error:\\n  //function arguments are a list of expressions\\n  console.log(if (condition) { 5 } else { 12 });\\n  //the plus operator expects the form: expression + expression\\n  var z = 42 + if (condition) { 12 };\\n\\n  //the ternary operator is an expression form of \\\"if\\\"\\n  console.log(condition ? 5 : 12);\\n  var z = 42 + condition ? 12 : 0;\\n```\\n---\\n\\n## Reading JavaScript\\n\\n```\\nconsole.log(message), message\\n```\\n\\n- a comma expression `c1, c2` with:\\n  - `c1`: a function invocation expression `f(x)` with:\\n    - `f`: a property access expression `o.p` with:\\n      - `o`: the value of the `console` binding\\n      - `p`: the `\\\"log\\\"` string literal\\n    - `x`: the value of the `message` binding\\n  - `c2`: the value of the `message` binding\\n---\\n\\n## Built-in objects\\n\\n- [Boolean](../conditionals/)\\n- [Number](../numbers-and-math/)\\n- [String](../strings/)\\n- [Object](../objects/)\\n- [Array](../arrays/)\\n- [Function](../functions/)\\n- (and more)\\n---\\n\\n## Host environments\\n\\nHost environments can expand and modify\\nhow the language behaves. They also inject global objects\\ne.g. `require` in node.js and `window` in the browser\\n\\n[See Host environments](../../host-environments/)\\n---\\n\\n## Useful Links\\n\\n- [ESPrima Parser Demo](http://esprima.org/demo/parse.html)\\n- [MDN JavaScript reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference)\\n\""],"sourceRoot":""}