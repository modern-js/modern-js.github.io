{"version":3,"sources":["../topics/homework-overview.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"static/js/10.4e1735d9.chunk.js","sourcesContent":["module.exports = \"# Homework 1 Overview\\n---\\n\\n### Common errors\\n\\n- Inefficient searching of arrays\\n- Not storing intermediate results in variables\\n- No error handling\\n---\\n\\n### Inefficient searching of arrays\\n```javascript\\n  for (student of students) {\\n    for (studentCourse) {\\n      for (course of courses) {\\n        if (studentCourse === course.section) {\\n          // ...\\n        }\\n      }\\n    }\\n  }\\n```\\n---\\n\\n### Not storing intermediate results in variables\\nAll of these create new arrays. This has both performance and memory impact. \\n```javascript\\n  Object.keys(obj).forEach(doStuff);\\n  // ...\\n  Object.keys(obj)[0]\\n  // ...\\n  for (let key of Object.keys(obj)) { /* ... */ }\\n  \\n```\\n---\\n\\n### No error handling\\n\\n```javascript\\n  for (let student of students) {\\n    // what if student.standing is not defined?\\n    studentsPerStanding[student.standing] += 1;\\n  }\\n```\\n---\\n\\n#### How many students are there per standing (freshman, sophomore, etc)?\\n\\n```javascript\\n  function studentsPerStanding() {\\n    return students.reduce((result, student) => {\\n      if (!student.standing || !result[student.standing]) {\\n        console.error(student, 'has no or invalid standing`);\\n      }\\n\\n      result[student.standing] += 1;\\n      return result;\\n    }, { freshman: 0, sophomore: 0, junior: 0, senior: 0 });\\n  }\\n```\\n\\n---\\n\\n#### How many courses are there per department?\\n```javascript\\n  function coursesPerDepartment() {\\n    return courses.reduce((result, course) => {\\n      if (!course.department) {\\n        console.error(course, 'has no department');\\n      }\\n      if (!result[course.department]) {\\n        result[course.department] = 0;\\n      }\\n\\n      result[course.department] += 1;\\n      return result;\\n    }, {});\\n  }\\n```\\n---\\n\\n#### Which student has the biggest sum of credits for their enrolled classes?\\n\\n```javascript\\n\\n\\n```\\n---\\n\\n#### How many students are in each department?\\n```javascript\\n  function studentsPerDepartment() {\\n    const courseDepartments = courses.reduce((result, course) => {\\n      result[course.section] = course.department;\\n      return result;\\n    }, {});\\n\\n    return students.reduce((result, student) => {\\n      const studentDepartments = new Set(\\n        student.courses.map(section => courseDepartments[section])\\n      );\\n      \\n      studentDepartments.keys().forEach((department) => {\\n        if (!result[department]) { result[department] = 0; }\\n\\n        result[department] += 1;\\n      });\\n      \\n      return result;\\n    }, {});\\n  }\\n```\\n---\\n\\n#### How many students does each professor teach to?\\n```javascript\\n  function studentsPerProfessor() {\\n    const courseProfessors = courses.reduce((result, course) => {\\n      result[course.section] = course.instructor;\\n      return result;\\n    }, {});\\n\\n    return students.reduce((result, student) => {\\n      const studentProfessors = new Set(\\n        student.courses.map(section => courseProfessors[section])\\n      );\\n\\n      studentProfessors.forEach(professor => {\\n        if (!result[professor]) { result[professor] = 0; }\\n\\n        result[professor] += 1;\\n      });\\n\\n      return result;\\n    }, {});\\n  }\\n```\\n---\\n\\n#### Which course has the most students enrolled in it?\\n```javascript\\n  function courseWithMostStudents() {\\n    // we've already written a function to calculate students per course\\n    const studsPerCourse = Object.entries(studentsPerCourse());\\n\\n    // studsPerCourse is now in the format [[\\\"COS310\\\", 12], [\\\"INF240\\\", 15]]\\n    return studsPerCourse.reduce((mostPopular, contender) => {\\n      const [mostPopularSection, mostNumerOfStudents] = mostPopular;\\n      const [contenderSection, contenderNumberOfStudents] = contender;\\n\\n      return (contenderNumberOfStudents > mostNumberOfStudents)\\n        ? contender\\n        : mostPopular;\\n    }, studsPerCourse[0]);\\n  }\\n```\\n---\\n\\n#### These are just examples\\n\\nThese are *NOT* the only possible solutions!!\\n\\n\\nOften using `reduce` is not the best way to express code in a readable manner.\\n\\n\\nI used it to demonstrate a functional approach.\\n\""],"sourceRoot":""}