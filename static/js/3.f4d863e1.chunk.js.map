{"version":3,"sources":["../topics/data-structures/events.md"],"names":["module","exports"],"mappings":"2EAAAA,EAAAC,QAAA","file":"static/js/3.f4d863e1.chunk.js","sourcesContent":["module.exports = \"# Events\\n---\\n\\n## DOM Events\\n\\nDOM events represent interactions from the user or the browser APIs.\\n\\n### Listening for events\\n```javascript\\n  const button = document.getElementById('btn1');\\n\\n  button.addEventListener('click', function (clickEvent) {\\n    console.log({ element: this, clickEvent });\\n  });\\n```\\n---\\n\\n### Triggering Events\\n```javascript\\n  const button = document.getElementById('btn1');\\n\\n  var aClick = new MouseEvent('click', {\\n    'view': window,\\n    'bubbles': true,\\n    'cancelable': true\\n  });\\n\\n  button.dispatchEvent(aClick);\\n```\\n---\\n\\n### Event propagation / delegation\\n\\nEvent bubbling means that event targeted at child nodes\\nwill execute the event handlers of the chain of parent nodes.\\n\\n```html\\n  <h1>Select your favorite color:</h1>\\n  <ul id=\\\"colors\\\">\\n    <li>Green</li>\\n    <li>Blue</li>\\n  </ul>\\n  <script>\\n    document.getElementById('colors').addEventListener(\\n        'click', event => console.log(event.target.innerText)\\n    );\\n  </script>\\n```\\n---\\n\\n## Custom Events in Browsers\\n\\n```javascript\\n  // Listen for events on a DOM element (e.g. document)\\n  document.addEventListener(\\n    'myCustomEvent',\\n    event => console.log(event.detail)\\n  );\\n\\n  // Trigger the event\\n  const myEvent = new CustomEvent(\\n    'myCustomEvent',\\n    { detail: 'any custom properties' }\\n  );\\n\\n  document.dispatchEvent(myEvent);\\n```\\n---\\n\\n## Events in NodeJS\\n\\n```javascript\\n  const EventEmitter = require('events').EventEmitter;\\n  const source = new EventEmitter();\\n\\n  // execute the callback function each time the event is triggered\\n  source.on('eventName', callback);\\n\\n  // execute the callback only once\\n  source.once('eventName', callback);\\n\\n  // trigger the event\\n  source.emit('eventName', payload);\\n```\\n---\\n\\n## WebSockets\\nA network protocol on top of HTTP that allows for\\n2-way communication between the browser and the server\\n\\n```javascript\\n  websocket.on('connection', socket => {\\n    socket.emit('hello');\\n    socket.on('message', console.log);\\n  });\\n```\\n---\\n\\n## Patterns\\n\\nEvents are a great mechanism to implement various patterns.\\n---\\n\\n### Fan-out\\nAn event with a single producer and multiple consumers.\\n\\n```javascript\\n  // these can be defined in different parts of the system\\n  btn.on('click', updateUI);\\n  btn.on('click', updateDB);\\n  btn.on('click', logsAndMetrics);\\n```\\n---\\n\\n### Fan-in\\nAn event with multiple producers and (possibly) a single consumers.\\n```javascript\\n  // multiple players fire the same event\\n  lobby.emit('ready', player);\\n\\n  //the lobby module pairs players in games\\n  lobby.on('ready', startWithTwoPlayers);\\n```\\n---\\n\\n### Pub/Sub\\nAllows us to decouple the producers and consumers (publishers and subscribers) of a messaging system.\\n\\n```javascript\\n  topics.on('new-item-on-sell', handleNewItem);\\n  topics.on('item-order', handleItemOrder);\\n  topics.on('customer-support', handleMyMessage);\\n\\n  topics.emit('new-item-on-sell', { name: \\\"Laptop\\\", price: 873.50 });\\n  topics.emit('item-order', { client, item });\\n```\\n\""],"sourceRoot":""}